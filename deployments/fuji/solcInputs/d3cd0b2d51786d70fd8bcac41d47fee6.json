{
  "language": "Solidity",
  "sources": {
    "contracts/base/OwnerPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"../libraries/Ownable.sol\";\nimport \"../libraries/Pausable.sol\";\n\nabstract contract OwnerPausable is Ownable, Pausable {\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/libraries/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"
    },
    "contracts/libraries/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}"
    },
    "contracts/libraries/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
    },
    "contracts/RequiemStableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\nimport \"./libraries/ReentrancyGuard.sol\";\nimport \"./libraries/Initializable.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./libraries/SafeERC20.sol\";\nimport \"./base/OwnerPausable.sol\";\nimport \"./RequiemStableSwapLib.sol\";\nimport \"./interfaces/IRequiemStableSwap.sol\";\n\ncontract RequiemStableSwap is OwnerPausable, ReentrancyGuard, Initializable, IRequiemStableSwap {\n    using RequiemStableSwapLib for RequiemStableSwapLib.SwapStorage;\n    using SafeERC20 for IERC20;\n\n    /// constants\n    uint256 public constant MIN_RAMP_TIME = 1 days;\n    uint256 public constant MAX_A = 1e6;\n    uint256 public constant MAX_A_CHANGE = 10;\n    uint256 public constant MAX_ADMIN_FEE = 1e10; // 100%\n    uint256 public constant MAX_SWAP_FEE = 1e8; // 1%\n    uint256 public constant MAX_WITHDRAW_FEE = 1e8; // 1%\n\n    /// STATE VARS\n    RequiemStableSwapLib.SwapStorage public swapStorage;\n    address public feeDistributor;\n    address public feeController;\n    mapping(address => uint8) public tokenIndexes;\n\n    modifier deadlineCheck(uint256 _deadline) {\n        require(block.timestamp <= _deadline, \"timeout\");\n        _;\n    }\n\n    modifier onlyFeeControllerOrOwner() {\n        require(msg.sender == feeController || msg.sender == owner(), \"!feeControllerOrOwner\");\n        _;\n    }\n\n    function initialize(\n        address[] memory _coins,\n        uint8[] memory _decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _adminFee,\n        uint256 _withdrawFee,\n        address _feeDistributor\n    ) external onlyOwner initializer {\n        require(_coins.length == _decimals.length, \"coinsLength != decimalsLength\");\n        require(_feeDistributor != address(0), \"feeDistributor = empty\");\n        uint256 numberOfCoins = _coins.length;\n        uint256[] memory rates = new uint256[](numberOfCoins);\n        IERC20[] memory coins = new IERC20[](numberOfCoins);\n        for (uint256 i = 0; i < numberOfCoins; i++) {\n            require(_coins[i] != address(0), \"invalidTokenAddress\");\n            require(_decimals[i] <= RequiemStableSwapLib.POOL_TOKEN_COMMON_DECIMALS, \"invalidDecimals\");\n            rates[i] = 10**(RequiemStableSwapLib.POOL_TOKEN_COMMON_DECIMALS - _decimals[i]);\n            coins[i] = IERC20(_coins[i]);\n            tokenIndexes[address(coins[i])] = uint8(i);\n        }\n\n        require(_A < MAX_A, \"> maxA\");\n        require(_fee <= MAX_SWAP_FEE, \"> maxSwapFee\");\n        require(_adminFee <= MAX_ADMIN_FEE, \"> maxAdminFee\");\n        require(_withdrawFee <= MAX_WITHDRAW_FEE, \"> maxWithdrawFee\");\n\n        swapStorage.lpToken = new LPToken(lpTokenName, lpTokenSymbol);\n        swapStorage.balances = new uint256[](numberOfCoins);\n        swapStorage.tokenMultipliers = rates;\n        swapStorage.pooledTokens = coins;\n        swapStorage.initialA = _A * RequiemStableSwapLib.A_PRECISION;\n        swapStorage.futureA = _A * RequiemStableSwapLib.A_PRECISION;\n        swapStorage.fee = _fee;\n        swapStorage.adminFee = _adminFee;\n        swapStorage.defaultWithdrawFee = _withdrawFee;\n        feeDistributor = _feeDistributor;\n    }\n\n    /// PUBLIC FUNCTIONS\n    function addLiquidity(\n        uint256[] memory amounts,\n        uint256 minMintAmount,\n        uint256 deadline\n    ) external override whenNotPaused nonReentrant deadlineCheck(deadline) returns (uint256) {\n        return swapStorage.addLiquidity(amounts, minMintAmount);\n    }\n\n    function swap(\n        uint8 fromIndex,\n        uint8 toIndex,\n        uint256 inAmount,\n        uint256 minOutAmount,\n        uint256 deadline\n    ) external override whenNotPaused nonReentrant deadlineCheck(deadline) returns (uint256) {\n        return swapStorage.swap(fromIndex, toIndex, inAmount, minOutAmount);\n    }\n\n    function removeLiquidity(\n        uint256 lpAmount,\n        uint256[] memory minAmounts,\n        uint256 deadline\n    ) external override nonReentrant deadlineCheck(deadline) returns (uint256[] memory) {\n        return swapStorage.removeLiquidity(lpAmount, minAmounts);\n    }\n\n    function removeLiquidityOneToken(\n        uint256 lpAmount,\n        uint8 index,\n        uint256 minAmount,\n        uint256 deadline\n    ) external override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\n        return swapStorage.removeLiquidityOneToken(lpAmount, index, minAmount);\n    }\n\n    function removeLiquidityImbalance(\n        uint256[] memory amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\n        return swapStorage.removeLiquidityImbalance(amounts, maxBurnAmount);\n    }\n\n    /// VIEW FUNCTIONS\n\n    function getVirtualPrice() external view override returns (uint256) {\n        return swapStorage.getVirtualPrice();\n    }\n\n    function getA() external view override returns (uint256) {\n        return swapStorage.getA();\n    }\n\n    function getAPrecise() external view override returns (uint256) {\n        return swapStorage.getAPrecise();\n    }\n\n    function getTokens() external view override returns (IERC20[] memory) {\n        return swapStorage.pooledTokens;\n    }\n\n    function getToken(uint8 index) external view override returns (IERC20) {\n        return swapStorage.pooledTokens[index];\n    }\n\n    function getLpToken() external view override returns (IERC20) {\n        return swapStorage.lpToken;\n    }\n\n    function getTokenIndex(address token) external view override returns (uint8 index) {\n        index = tokenIndexes[token];\n        require(address(swapStorage.pooledTokens[index]) == token, \"tokenNotFound\");\n    }\n\n    function getTokenPrecisionMultipliers() external view returns (uint256[] memory) {\n        return swapStorage.tokenMultipliers;\n    }\n\n    function getTokenBalances() external view override returns (uint256[] memory) {\n        return swapStorage.balances;\n    }\n\n    function getTokenBalance(uint8 index) external view override returns (uint256) {\n        return swapStorage.balances[index];\n    }\n\n    function getNumberOfTokens() external view override returns (uint256) {\n        return swapStorage.pooledTokens.length;\n    }\n\n    function getAdminBalances() external view override returns (uint256[] memory adminBalances) {\n        uint256 length = swapStorage.pooledTokens.length;\n        adminBalances = new uint256[](length);\n        for (uint256 i = 0; i < length; i++) {\n            adminBalances[i] = swapStorage.getAdminBalance(i);\n        }\n    }\n\n    function getAdminBalance(uint8 index) external view override returns (uint256) {\n        return swapStorage.getAdminBalance((index));\n    }\n\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view override returns (uint256) {\n        return swapStorage.calculateTokenAmount(amounts, deposit);\n    }\n\n    function calculateSwap(\n        uint8 inIndex,\n        uint8 outIndex,\n        uint256 inAmount\n    ) external view override returns (uint256) {\n        return swapStorage.calculateSwap(inIndex, outIndex, inAmount);\n    }\n\n    function calculateRemoveLiquidity(address account, uint256 amount)\n        external\n        view\n        override\n        returns (uint256[] memory)\n    {\n        return swapStorage.calculateRemoveLiquidity(account, amount);\n    }\n\n    function calculateRemoveLiquidityOneToken(\n        address account,\n        uint256 amount,\n        uint8 index\n    ) external view override returns (uint256) {\n        return swapStorage.calculateRemoveLiquidityOneToken(account, amount, index);\n    }\n\n    function calculateCurrentWithdrawFee(address account) external view override returns (uint256) {\n        return swapStorage._calculateCurrentWithdrawFee(account);\n    }\n\n    /// RESTRICTED FUNCTION\n    /**\n     * @notice Updates the user withdraw fee. This function can only be called by\n     * the pool token. Should be used to update the withdraw fee on transfer of pool tokens.\n     * Transferring your pool token will reset the 4 weeks period. If the recipient is already\n     * holding some pool tokens, the withdraw fee will be discounted in respective amounts.\n     * @param recipient address of the recipient of pool token\n     * @param transferAmount amount of pool token to transfer\n     */\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external override {\n        require(msg.sender == address(swapStorage.lpToken), \"!lpToken\");\n        swapStorage.updateUserWithdrawFee(recipient, transferAmount);\n    }\n\n    /**\n     * @notice Sets the admin fee\n     * @dev adminFee cannot be higher than 100% of the swap fee\n     * swap fee cannot be higher than 1% of each swap\n     * @param newSwapFee new swap fee to be applied on future transactions\n     * @param newAdminFee new admin fee to be applied on future transactions\n     * @param newWithdrawFee new initial withdraw fee to be applied on future withdrawal transactions\n     */\n    function setFee(\n        uint256 newSwapFee,\n        uint256 newAdminFee,\n        uint256 newWithdrawFee\n    ) external onlyOwner {\n        require(newSwapFee <= MAX_SWAP_FEE, \"> maxSwapFee\");\n        require(newAdminFee <= MAX_ADMIN_FEE, \"> maxAdminFee\");\n        require(newWithdrawFee <= MAX_WITHDRAW_FEE, \"> maxWithdrawFee\");\n        swapStorage.adminFee = newAdminFee;\n        swapStorage.fee = newSwapFee;\n        swapStorage.defaultWithdrawFee = newWithdrawFee;\n\n        emit NewFee(newSwapFee, newAdminFee, newWithdrawFee);\n    }\n\n    /**\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\n     * the limit range.\n     * @param futureA the new A to ramp towards\n     * @param futureATime timestamp when the new A should be reached\n     */\n    function rampA(uint256 futureA, uint256 futureATime) external onlyOwner {\n        require(block.timestamp >= swapStorage.initialATime + (1 days), \"< rampDelay\"); // please wait 1 days before start a new ramping\n        require(futureATime >= block.timestamp + (MIN_RAMP_TIME), \"< minRampTime\");\n        require(0 < futureA && futureA < MAX_A, \"outOfRange\");\n\n        uint256 initialAPrecise = swapStorage.getAPrecise();\n        uint256 futureAPrecise = futureA * RequiemStableSwapLib.A_PRECISION;\n\n        if (futureAPrecise < initialAPrecise) {\n            require(futureAPrecise * (MAX_A_CHANGE) >= initialAPrecise, \"> maxChange\");\n        } else {\n            require(futureAPrecise <= initialAPrecise * (MAX_A_CHANGE), \"> maxChange\");\n        }\n\n        swapStorage.initialA = initialAPrecise;\n        swapStorage.futureA = futureAPrecise;\n        swapStorage.initialATime = block.timestamp;\n        swapStorage.futureATime = futureATime;\n\n        emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureATime);\n    }\n\n    function stopRampA() external onlyOwner {\n        require(swapStorage.futureATime > block.timestamp, \"alreadyStopped\");\n        uint256 currentA = swapStorage.getAPrecise();\n\n        swapStorage.initialA = currentA;\n        swapStorage.futureA = currentA;\n        swapStorage.initialATime = block.timestamp;\n        swapStorage.futureATime = block.timestamp;\n\n        emit StopRampA(currentA, block.timestamp);\n    }\n\n    function setFeeController(address _feeController) external onlyOwner {\n        require(_feeController != address(0), \"zeroAddress\");\n        feeController = _feeController;\n        emit FeeControllerChanged(_feeController);\n    }\n\n    function setFeeDistributor(address _feeDistributor) external onlyOwner {\n        require(_feeDistributor != address(0), \"zeroAddress\");\n        feeDistributor = _feeDistributor;\n        emit FeeDistributorChanged(_feeDistributor);\n    }\n\n    function withdrawAdminFee() external onlyFeeControllerOrOwner {\n        for (uint256 i = 0; i < swapStorage.pooledTokens.length; i++) {\n            IERC20 token = swapStorage.pooledTokens[i];\n            uint256 balance = token.balanceOf(address(this)) - (swapStorage.balances[i]);\n            if (balance != 0) {\n                token.safeTransfer(feeDistributor, balance);\n                emit CollectProtocolFee(address(token), balance);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/libraries/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
    },
    "contracts/RequiemStableSwapLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"./tokens/LPToken.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./libraries/SafeERC20.sol\";\n\n/**\n * StableSwap main algorithm\n */\nlibrary RequiemStableSwapLib {\n    using SafeERC20 for IERC20;\n\n    event AddLiquidity(\n        address indexed provider,\n        uint256[] token_amounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 token_supply\n    );\n\n    event TokenExchange(\n        address indexed buyer,\n        uint256 sold_id,\n        uint256 tokens_sold,\n        uint256 bought_id,\n        uint256 tokens_bought\n    );\n\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\n\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\n\n    event RemoveLiquidityImbalance(\n        address indexed provider,\n        uint256[] token_amounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 token_supply\n    );\n\n    uint256 public constant FEE_DENOMINATOR = 1e10;\n    // uint256 public constant PRECISION = 1e18;\n\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\n    /// so we add some (small) PRECISION when divide in each iteration\n    uint256 public constant A_PRECISION = 100;\n    /// @dev max iteration of converge calccuate\n    uint256 internal constant MAX_ITERATION = 256;\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\n\n    struct SwapStorage {\n        IERC20[] pooledTokens;\n        LPToken lpToken;\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\n        uint256[] tokenMultipliers;\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\n        uint256[] balances;\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\n        uint256 fee;\n        /// @dev admin fee in ratio of swap fee.\n        uint256 adminFee;\n        /// @dev observation of A, multiplied with A_PRECISION\n        uint256 initialA;\n        uint256 futureA;\n        uint256 initialATime;\n        uint256 futureATime;\n        // withdrawal fee control\n        uint256 defaultWithdrawFee;\n        mapping(address => uint256) depositTimestamp;\n        mapping(address => uint256) withdrawFeeMultiplier;\n    }\n\n    /**\n     * @notice Deposit coins into the pool\n     * @param amounts List of amounts of coins to deposit\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\n     * @return mintAmount Amount of LP tokens received by depositing\n     */\n    function addLiquidity(\n        SwapStorage storage self,\n        uint256[] memory amounts,\n        uint256 minMintAmount\n    ) external returns (uint256 mintAmount) {\n        uint256 nCoins = self.pooledTokens.length;\n        require(amounts.length == nCoins, \"invalidAmountsLength\");\n        uint256[] memory fees = new uint256[](nCoins);\n        uint256 _fee = _feePerToken(self);\n\n        uint256 tokenSupply = self.lpToken.totalSupply();\n        uint256 amp = _getAPrecise(self);\n\n        uint256 D0 = 0;\n        if (tokenSupply > 0) {\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\n        }\n\n        uint256[] memory newBalances = self.balances;\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (tokenSupply == 0) {\n                require(amounts[i] > 0, \"initialDepositRequireAllTokens\");\n            }\n            // get real transfer in amount\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\n        }\n\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\n        assert(D1 > D0); // double check\n\n        if (tokenSupply == 0) {\n            self.balances = newBalances;\n            mintAmount = D1;\n        } else {\n            uint256 diff = 0;\n            for (uint256 i = 0; i < nCoins; i++) {\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\n                newBalances[i] -= fees[i];\n            }\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\n        }\n\n        require(mintAmount >= minMintAmount, \"> slippage\");\n\n        self.lpToken.mint(msg.sender, mintAmount);\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\n    }\n\n    function swap(\n        SwapStorage storage self,\n        uint256 i,\n        uint256 j,\n        uint256 inAmount,\n        uint256 minOutAmount\n    ) external returns (uint256) {\n        IERC20 inCoin = self.pooledTokens[i];\n        uint256[] memory normalizedBalances = _xp(self);\n        inAmount = _doTransferIn(inCoin, inAmount);\n\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\n\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\n\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\n\n        require(dy >= minOutAmount, \"> slippage\");\n\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\n\n        // update balances\n        self.balances[i] += inAmount;\n        self.balances[j] -= dy + _adminFee;\n\n        self.pooledTokens[j].safeTransfer(msg.sender, dy);\n        emit TokenExchange(msg.sender, i, inAmount, j, dy);\n        return dy;\n    }\n\n    function removeLiquidity(\n        SwapStorage storage self,\n        uint256 lpAmount,\n        uint256[] memory minAmounts\n    ) external returns (uint256[] memory amounts) {\n        uint256 totalSupply = self.lpToken.totalSupply();\n        require(lpAmount <= totalSupply);\n        uint256 nCoins = self.pooledTokens.length;\n\n        uint256[] memory fees = new uint256[](nCoins);\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\n\n        for (uint256 i = 0; i < amounts.length; i++) {\n            require(amounts[i] >= minAmounts[i], \"> slippage\");\n            self.balances[i] = self.balances[i] - amounts[i];\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\n        }\n\n        self.lpToken.burnFrom(msg.sender, lpAmount);\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\n    }\n\n    function removeLiquidityOneToken(\n        SwapStorage storage self,\n        uint256 lpAmount,\n        uint256 index,\n        uint256 minAmount\n    ) external returns (uint256) {\n        uint256 totalSupply = self.lpToken.totalSupply();\n        require(totalSupply > 0, \"totalSupply = 0\");\n        uint256 numTokens = self.pooledTokens.length;\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \"> balance\");\n        require(lpAmount <= totalSupply, \"> totalSupply\");\n        require(index < numTokens, \"tokenNotFound\");\n\n        uint256 dyFee;\n        uint256 dy;\n\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\n\n        require(dy >= minAmount, \"> slippage\");\n\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\n        self.lpToken.burnFrom(msg.sender, lpAmount);\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\n\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\n\n        return dy;\n    }\n\n    function removeLiquidityImbalance(\n        SwapStorage storage self,\n        uint256[] memory amounts,\n        uint256 maxBurnAmount\n    ) external returns (uint256 burnAmount) {\n        uint256 nCoins = self.pooledTokens.length;\n        require(amounts.length == nCoins, \"invalidAmountsLength\");\n        uint256 totalSupply = self.lpToken.totalSupply();\n        require(totalSupply != 0, \"totalSupply = 0\");\n        uint256 _fee = _feePerToken(self);\n        uint256 amp = _getAPrecise(self);\n\n        uint256[] memory newBalances = self.balances;\n        uint256 D0 = _getD(_xp(self), amp);\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            newBalances[i] -= amounts[i];\n        }\n\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\n        uint256[] memory fees = new uint256[](nCoins);\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\n            uint256 diff = _distance(newBalances[i], idealBalance);\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\n            newBalances[i] -= fees[i];\n        }\n\n        // recalculate invariant with fee charged balances\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\n        assert(burnAmount > 0);\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \"attacker\"\n        require(burnAmount <= maxBurnAmount, \"> slippage\");\n\n        self.lpToken.burnFrom(msg.sender, burnAmount);\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (amounts[i] != 0) {\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\n            }\n        }\n\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\n    }\n\n    /// VIEW FUNCTIONS\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\n        return _getAPrecise(self);\n    }\n\n    /**\n     * Returns portfolio virtual price (for calculating profit)\n     * scaled up by 1e18\n     */\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\n        uint256 tokenSupply = self.lpToken.totalSupply();\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\n    }\n\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\n        require(index < self.pooledTokens.length, \"indexOutOfRange\");\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\n    }\n\n    /**\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\n     * without taking fees into account\n     */\n    function calculateTokenAmount(\n        SwapStorage storage self,\n        uint256[] memory amounts,\n        bool deposit\n    ) external view returns (uint256) {\n        uint256 nCoins = self.pooledTokens.length;\n        require(amounts.length == nCoins, \"invalidAmountsLength\");\n        uint256 amp = _getAPrecise(self);\n        uint256 D0 = _getD(_xp(self), amp);\n\n        uint256[] memory newBalances = self.balances;\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (deposit) {\n                newBalances[i] += amounts[i];\n            } else {\n                newBalances[i] -= amounts[i];\n            }\n        }\n\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\n        uint256 totalSupply = self.lpToken.totalSupply();\n\n        if (totalSupply == 0) {\n            return D1; // first depositor take it all\n        }\n\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\n        return (diff * self.lpToken.totalSupply()) / D0;\n    }\n\n    function getA(SwapStorage storage self) external view returns (uint256) {\n        return _getAPrecise(self) / A_PRECISION;\n    }\n\n    function calculateSwap(\n        SwapStorage storage self,\n        uint256 inIndex,\n        uint256 outIndex,\n        uint256 inAmount\n    ) external view returns (uint256) {\n        uint256[] memory normalizedBalances = _xp(self);\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance - 1) / self.tokenMultipliers[outIndex];\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\n        return outAmount - _fee;\n    }\n\n    function calculateRemoveLiquidity(\n        SwapStorage storage self,\n        address account,\n        uint256 amount\n    ) external view returns (uint256[] memory) {\n        return _calculateRemoveLiquidity(self, account, amount);\n    }\n\n    function calculateRemoveLiquidityOneToken(\n        SwapStorage storage self,\n        address account,\n        uint256 lpAmount,\n        uint256 tokenIndex\n    ) external view returns (uint256 amount) {\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\n    }\n\n    /**\n     * @notice Update the withdraw fee for `user`. If the user is currently\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\n     * the starting withdraw fee based on the last deposit's time & amount relative\n     * to the new deposit.\n     *\n     * @param self Swap struct to read from and write to\n     * @param user address of the user depositing tokens\n     * @param toMint amount of pool tokens to be minted\n     */\n    function updateUserWithdrawFee(\n        SwapStorage storage self,\n        address user,\n        uint256 toMint\n    ) external {\n        _updateUserWithdrawFee(self, user, toMint);\n    }\n\n    /// INTERNAL FUNCTIONS\n\n    /**\n     * Ramping A up or down, return A with precision of A_PRECISION\n     */\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\n        if (block.timestamp >= self.futureATime) {\n            return self.futureA;\n        }\n\n        if (self.futureA > self.initialA) {\n            return\n                self.initialA +\n                ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) /\n                (self.futureATime - self.initialATime);\n        }\n\n        return\n            self.initialA -\n            ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) /\n            (self.futureATime - self.initialATime);\n    }\n\n    /**\n     * normalized balances of each tokens.\n     */\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\n        for (uint256 i = 0; i < balances.length; i++) {\n            rates[i] = (rates[i] * balances[i]);\n        }\n\n        return rates;\n    }\n\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\n        return _xp(self.balances, self.tokenMultipliers);\n    }\n\n    /**\n     * Calculate D for *NORMALIZED* balances of each tokens\n     * @param xp normalized balances of token\n     */\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\n        uint256 nCoins = xp.length;\n        uint256 sum = _sumOf(xp);\n        if (sum == 0) {\n            return 0;\n        }\n\n        uint256 Dprev = 0;\n        uint256 D = sum;\n        uint256 Ann = amp * nCoins;\n\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\n            uint256 D_P = D;\n            for (uint256 j = 0; j < xp.length; j++) {\n                D_P = (D_P * D) / (xp[j] * nCoins);\n            }\n            Dprev = D;\n            D =\n                (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) /\n                (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\n            if (_distance(D, Dprev) <= 1) {\n                return D;\n            }\n        }\n\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n        // function which does not rely on D.\n        revert(\"invariantCalculationFailed\");\n    }\n\n    /**\n     * calculate new balance of when swap\n     * Done by solving quadratic equation iteratively.\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\n     *  x_1**2 + b*x_1 = c\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\n     * @param inIndex index of token to swap in\n     * @param outIndex index of token to swap out\n     * @param inBalance new balance (normalized) of input token if the swap success\n     * @return NORMALIZED balance of output token if the swap success\n     */\n    function _getY(\n        SwapStorage storage self,\n        uint256 inIndex,\n        uint256 outIndex,\n        uint256 inBalance,\n        uint256[] memory normalizedBalances\n    ) internal view returns (uint256) {\n        require(inIndex != outIndex, \"sameToken\");\n        uint256 nCoins = self.pooledTokens.length;\n        require(inIndex < nCoins && outIndex < nCoins, \"indexOutOfRange\");\n\n        uint256 amp = _getAPrecise(self);\n        uint256 Ann = amp * nCoins;\n        uint256 D = _getD(normalizedBalances, amp);\n\n        uint256 sum = 0; // sum of new balances except output token\n        uint256 c = D;\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (i == outIndex) {\n                continue;\n            }\n\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\n            sum += x;\n            c = (c * D) / (x * nCoins);\n        }\n\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\n        uint256 b = sum + (D * A_PRECISION) / Ann;\n\n        uint256 lastY = 0;\n        uint256 y = D;\n\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\n            lastY = y;\n            y = (y * y + c) / (2 * y + b - D);\n            if (_distance(lastY, y) <= 1) {\n                return y;\n            }\n        }\n\n        revert(\"yCalculationFailed\");\n    }\n\n    function _calculateRemoveLiquidity(\n        SwapStorage storage self,\n        address account,\n        uint256 amount\n    ) internal view returns (uint256[] memory) {\n        uint256 totalSupply = self.lpToken.totalSupply();\n        require(amount <= totalSupply, \"Cannot exceed total supply\");\n\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) /\n            FEE_DENOMINATOR;\n\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\n\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\n        }\n        return amounts;\n    }\n\n    function _calculateRemoveLiquidityOneToken(\n        SwapStorage storage self,\n        address account,\n        uint256 tokenAmount,\n        uint256 index\n    ) internal view returns (uint256 dy, uint256 fee) {\n        require(index < self.pooledTokens.length, \"indexOutOfRange\");\n        uint256 amp = _getAPrecise(self);\n        uint256[] memory xp = _xp(self);\n        uint256 D0 = _getD(xp, amp);\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\n        uint256 newY = _getYD(self, amp, index, xp, D1);\n        uint256[] memory reducedXP = xp;\n        uint256 _fee = _feePerToken(self);\n\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\n            uint256 expectedDx = 0;\n            if (i == index) {\n                expectedDx = (xp[i] * D1) / D0 - newY;\n            } else {\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\n            }\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\n        }\n\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\n        dy = (dy - 1) / self.tokenMultipliers[index];\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\n    }\n\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\n        uint256 nCoins = self.pooledTokens.length;\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\n    }\n\n    function _getYD(\n        SwapStorage storage self,\n        uint256 A,\n        uint256 index,\n        uint256[] memory xp,\n        uint256 D\n    ) internal view returns (uint256) {\n        uint256 nCoins = self.pooledTokens.length;\n        assert(index < nCoins);\n        uint256 Ann = A * nCoins;\n        uint256 c = D;\n        uint256 s = 0;\n        uint256 _x = 0;\n        uint256 yPrev = 0;\n\n        for (uint256 i = 0; i < nCoins; i++) {\n            if (i == index) {\n                continue;\n            }\n            _x = xp[i];\n            s += _x;\n            c = (c * D) / (_x * nCoins);\n        }\n\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\n        uint256 b = s + (D * A_PRECISION) / Ann;\n        uint256 y = D;\n\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\n            yPrev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            if (_distance(yPrev, y) <= 1) {\n                return y;\n            }\n        }\n        revert(\"invariantCalculationFailed\");\n    }\n\n    function _updateUserWithdrawFee(\n        SwapStorage storage self,\n        address user,\n        uint256 toMint\n    ) internal {\n        // If token is transferred to address 0 (or burned), don't update the fee.\n        if (user == address(0)) {\n            return;\n        }\n        if (self.defaultWithdrawFee == 0) {\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\n        } else {\n            // Otherwise, calculate appropriate discount based on last deposit amount\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\n            uint256 currentBalance = self.lpToken.balanceOf(user);\n\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\n            // ((toMint + currentBalance) * defaultWithdrawFee)\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\n                self.withdrawFeeMultiplier[user] =\n                    (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) /\n                    ((toMint + currentBalance) * self.defaultWithdrawFee);\n            }\n        }\n        self.depositTimestamp[user] = block.timestamp;\n    }\n\n    /**\n     * @notice Calculate the fee that is applied when the given user withdraws.\n     * Withdraw fee decays linearly over 4 weeks.\n     * @param user address you want to calculate withdraw fee of\n     * @return current withdraw fee of the user\n     */\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\n        if (endTime > block.timestamp) {\n            uint256 timeLeftover = endTime - block.timestamp;\n            return\n                (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) /\n                (4 weeks) /\n                FEE_DENOMINATOR;\n        }\n        return 0;\n    }\n\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\n        uint256 priorBalance = token.balanceOf(address(this));\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        return token.balanceOf(address(this)) - priorBalance;\n    }\n\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\n        sum = 0;\n        for (uint256 i = 0; i < x.length; i++) {\n            sum += x[i];\n        }\n    }\n\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x > y ? x - y : y - x;\n    }\n}\n"
    },
    "contracts/interfaces/IRequiemStableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface IRequiemStableSwap {\n    /// EVENTS\n    event AddLiquidity(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 tokenSupply\n    );\n\n    event TokenExchange(\n        address indexed buyer,\n        uint256 soldId,\n        uint256 tokensSold,\n        uint256 boughtId,\n        uint256 tokensBought\n    );\n\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\n\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\n\n    event RemoveLiquidityImbalance(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 tokenSupply\n    );\n\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\n\n    event StopRampA(uint256 A, uint256 timestamp);\n\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\n\n    event CollectProtocolFee(address token, uint256 amount);\n\n    event FeeControllerChanged(address newController);\n\n    event FeeDistributorChanged(address newController);\n\n    // pool data view functions\n    function getLpToken() external view returns (IERC20 lpToken);\n\n    function getA() external view returns (uint256);\n\n    function getAPrecise() external view returns (uint256);\n\n    function getToken(uint8 index) external view returns (IERC20);\n\n    function getTokens() external view returns (IERC20[] memory);\n\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function getTokenBalance(uint8 index) external view returns (uint256);\n\n    function getTokenBalances() external view returns (uint256[] memory);\n\n    function getNumberOfTokens() external view returns (uint256);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\n\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\n\n    function calculateRemoveLiquidityOneToken(\n        address account,\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) external view returns (uint256 availableTokenAmount);\n\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\n\n    function getAdminBalance(uint8 index) external view returns (uint256);\n\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\n\n    // state modifying functions\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function addLiquidity(\n        uint256[] calldata amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidity(\n        uint256 amount,\n        uint256[] calldata minAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory);\n\n    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidityImbalance(\n        uint256[] calldata amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\n}\n"
    },
    "contracts/libraries/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
    },
    "contracts/tokens/LPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\nimport \"../libraries/ERC20Burnable.sol\";\nimport \"../libraries/Ownable.sol\";\nimport \"../interfaces/IRequiemStableSwap.sol\";\n\ncontract LPToken is Ownable, ERC20Burnable {\n    IRequiemStableSwap public swap;\n\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\n        swap = IRequiemStableSwap(msg.sender);\n    }\n\n    function mint(address _to, uint256 _amount) external onlyOwner {\n        require(_amount > 0, \"zeroMintAmount\");\n        _mint(_to, _amount);\n    }\n\n    /**\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20) {\n        super._beforeTokenTransfer(from, to, amount);\n        swap.updateUserWithdrawFee(to, amount);\n    }\n}\n"
    },
    "contracts/libraries/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(\n            currentAllowance >= amount,\n            \"ERC20: burn amount exceeds allowance\"\n        );\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/libraries/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"
    },
    "contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"
    },
    "contracts/FeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./libraries/Initializable.sol\";\nimport \"./libraries/Ownable.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./libraries/SafeERC20.sol\";\nimport \"./interfaces/IRequiemStableSwap.sol\";\nimport \"./RequiemStableSwapRouter.sol\";\n\ncontract FeeDistributor is Initializable, Ownable {\n    using SafeERC20 for IERC20;\n\n    enum SwapPoolType {\n        plain,\n        meta\n    }\n\n    struct SwapConfig {\n        SwapPoolType poolType;\n        address pool;\n        address basePool;\n    }\n\n    /// @dev convert all fee to this token\n    address public target;\n\n    /// @dev fromToken => routerAddress\n    mapping(address => SwapConfig) public getSwapConfig;\n    mapping(address => bool) public operators;\n\n    RequiemStableSwapRouter public swapRouter;\n    address[] public whiteListedTokens;\n    uint256 constant swapTimeout = 3600;\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    function transfer(IERC20 token, address to, uint256 amount) external {\n        if (operators[msg.sender] == true) {\n            uint256 _before = token.balanceOf(address(this));\n            if (_before >= amount) {\n                token.safeTransfer(to, amount);\n                uint256 _after = token.balanceOf(address(this));\n                require(_before - _after == amount, 'transfer-fail');\n                emit TransferFee(msg.sender, to, token, amount);\n            }\n        }\n    }\n\n    function swap() external {\n        if (operators[msg.sender] == true) {\n            for (uint256 i = 0; i < whiteListedTokens.length; i++) {\n                address fromToken = whiteListedTokens[i];\n                SwapConfig storage swapConfig = getSwapConfig[fromToken];\n\n                if (swapConfig.poolType == SwapPoolType.plain) {\n                    swapPlainPool(swapConfig, fromToken);\n                } else if (swapConfig.poolType == SwapPoolType.meta) {\n                    swapMetaPool(swapConfig, fromToken);\n                }\n            }\n        }\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function swapPlainPool(SwapConfig storage config, address fromTokenAddress) internal {\n        IERC20 fromToken = IERC20(fromTokenAddress);\n        uint256 inAmount = fromToken.balanceOf(address(this));\n        if (inAmount > 0) {\n            IRequiemStableSwap pool = IRequiemStableSwap(config.pool);\n            uint8 fromIndex = pool.getTokenIndex(fromTokenAddress);\n            uint8 toIndex = pool.getTokenIndex(target);\n            fromToken.safeIncreaseAllowance(config.pool, inAmount);\n            pool.swap(fromIndex, toIndex, inAmount, 0, block.timestamp + swapTimeout);\n        }\n    }\n\n    function swapMetaPool(SwapConfig storage config, address fromTokenAddress) internal {\n        IERC20 fromToken = IERC20(fromTokenAddress);\n        uint256 inAmount = fromToken.balanceOf(address(this));\n\n        if (inAmount > 0) {\n            IRequiemStableSwap pool = IRequiemStableSwap(config.pool);\n            IRequiemStableSwap basePool = IRequiemStableSwap(config.basePool);\n            uint8 tokenIndexFrom = pool.getTokenIndex(fromTokenAddress);\n            uint8 tokenIndexTo = basePool.getTokenIndex(target);\n            fromToken.safeIncreaseAllowance(address(swapRouter), inAmount);\n            swapRouter.swapToBase(\n                pool,\n                basePool,\n                tokenIndexFrom,\n                tokenIndexTo,\n                inAmount,\n                0,\n                block.timestamp + swapTimeout\n            );\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function initialize(address _target, address _swapRouter) external onlyOwner initializer {\n        target = _target;\n        swapRouter = RequiemStableSwapRouter(_swapRouter);\n    }\n\n    function toggleOperator(address _operator) external onlyOwner {\n        operators[_operator] = !operators[_operator];\n    }\n\n    function setSwapConfig(\n        address _fromToken,\n        SwapPoolType poolType,\n        address pool,\n        address basePool\n    ) external onlyOwner {\n        require(_fromToken != address(0), \"zeroFromTokenAddress\");\n        require(pool != address(0), \"zeroPoolAddress\");\n\n        if (poolType == SwapPoolType.meta) {\n            require(basePool != address(0), \"zeroBasePoolAddress\");\n        }\n\n        if (getSwapConfig[_fromToken].pool == address(0)) {\n            whiteListedTokens.push(_fromToken);\n        }\n\n        getSwapConfig[_fromToken] = SwapConfig({poolType: poolType, pool: pool, basePool: basePool});\n    }\n\n\n    /* =============== EVENTS ==================== */\n\n    event TransferFee(address caller, address to, IERC20 token, uint256 amount);\n}\n"
    },
    "contracts/RequiemStableSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./interfaces/IRequiemStableSwap.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./libraries/SafeERC20.sol\";\n\ncontract RequiemStableSwapRouter {\n    using SafeERC20 for IERC20;\n\n    function calculateConvert(\n        IRequiemStableSwap fromPool,\n        IRequiemStableSwap toPool,\n        uint256 amount\n    ) external view returns (uint256) {\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\n        uint256[] memory amounts = fromPool.calculateRemoveLiquidity(address(this), amount);\n        uint256[] memory meta_amounts = new uint256[](fromPoolLength);\n        for (uint8 i = 0; i < fromPoolLength; i++) {\n            IERC20 fromCoin = fromPool.getToken(i);\n            uint256 toCoinIndex = toPool.getTokenIndex(address(fromCoin));\n            meta_amounts[toCoinIndex] = amounts[i];\n        }\n        return toPool.calculateTokenAmount(meta_amounts, true);\n    }\n\n    function convert(\n        IRequiemStableSwap fromPool,\n        IRequiemStableSwap toPool,\n        uint256 amount,\n        uint256 minToMint,\n        uint256 deadline\n    ) external returns (uint256) {\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\n        uint256 toPoolLength = toPool.getNumberOfTokens();\n        require(address(fromPool) != address(toPool), \"fromPool = toPool\");\n        require(fromPoolLength == toPoolLength, \"poolTokensLengthMissmatch\");\n        IERC20 fromToken = fromPool.getLpToken();\n        IERC20 toToken = toPool.getLpToken();\n        uint256[] memory min_amounts = new uint256[](fromPoolLength);\n        // validate token\n        for (uint8 i = 0; i < fromPoolLength; i++) {\n            IERC20 coin = fromPool.getToken(i);\n            toPool.getTokenIndex(address(coin));\n        }\n        fromToken.transferFrom(msg.sender, address(this), amount);\n        fromToken.safeIncreaseAllowance(address(fromPool), amount);\n        fromPool.removeLiquidity(amount, min_amounts, deadline);\n\n        uint256[] memory meta_amounts = new uint256[](toPoolLength);\n\n        for (uint8 i = 0; i < toPoolLength; i++) {\n            IERC20 coin = toPool.getToken(i);\n            uint256 addBalance = coin.balanceOf(address(this));\n            coin.safeIncreaseAllowance(address(toPool), addBalance);\n            meta_amounts[i] = addBalance;\n        }\n        toPool.addLiquidity(meta_amounts, minToMint, deadline);\n\n        uint256 lpAmount = toToken.balanceOf(address(this));\n        toToken.transfer(msg.sender, lpAmount);\n        return lpAmount;\n    }\n\n    function addLiquidity(\n        IRequiemStableSwap pool,\n        IRequiemStableSwap basePool,\n        uint256[] memory meta_amounts,\n        uint256[] memory base_amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external returns (uint256) {\n        IERC20 token = IERC20(pool.getLpToken());\n        require(base_amounts.length == basePool.getNumberOfTokens(), \"invalidBaseAmountsLength\");\n        require(meta_amounts.length == pool.getNumberOfTokens(), \"invalidMetaAmountsLength\");\n        bool deposit_base = false;\n        for (uint8 i = 0; i < base_amounts.length; i++) {\n            uint256 amount = base_amounts[i];\n            if (amount > 0) {\n                deposit_base = true;\n                IERC20 coin = basePool.getToken(i);\n                coin.safeTransferFrom(msg.sender, address(this), amount);\n                uint256 transferred = coin.balanceOf(address(this));\n                coin.safeIncreaseAllowance(address(basePool), transferred);\n                base_amounts[i] = transferred;\n            }\n        }\n        if (deposit_base) {\n            basePool.addLiquidity(base_amounts, 0, deadline);\n        }\n\n        for (uint8 i = 0; i < meta_amounts.length; i++) {\n            IERC20 coin = pool.getToken(i);\n            if (meta_amounts[i] > 0) {\n                coin.safeTransferFrom(msg.sender, address(this), meta_amounts[i]);\n            }\n            uint256 transferred = coin.balanceOf(address(this));\n            coin.safeIncreaseAllowance(address(pool), transferred);\n            meta_amounts[i] = transferred;\n        }\n        pool.addLiquidity(meta_amounts, minToMint, deadline);\n        uint256 lpAmount = token.balanceOf(address(this));\n        token.transfer(msg.sender, lpAmount);\n        return lpAmount;\n    }\n\n    function removeLiquidity(\n        IRequiemStableSwap pool,\n        IRequiemStableSwap basePool,\n        uint256 _amount,\n        uint256[] calldata min_amounts_meta,\n        uint256[] calldata min_amounts_base,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts, uint256[] memory base_amounts) {\n        IERC20 token = pool.getLpToken();\n        IERC20 baseToken = basePool.getLpToken();\n        token.transferFrom(msg.sender, address(this), _amount);\n        token.safeIncreaseAllowance(address(pool), _amount);\n        pool.removeLiquidity(_amount, min_amounts_meta, deadline);\n        uint256 _base_amount = baseToken.balanceOf(address(this));\n        baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\n\n        basePool.removeLiquidity(_base_amount, min_amounts_base, deadline);\n        // Transfer all coins out\n        amounts = new uint256[](pool.getNumberOfTokens());\n        for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\n            IERC20 coin = pool.getToken(i);\n            amounts[i] = coin.balanceOf(address(this));\n            if (amounts[i] > 0) {\n                coin.safeTransfer(msg.sender, amounts[i]);\n            }\n        }\n\n        base_amounts = new uint256[](basePool.getNumberOfTokens());\n        for (uint8 i = 0; i < basePool.getNumberOfTokens(); i++) {\n            IERC20 coin = basePool.getToken(i);\n            base_amounts[i] = coin.balanceOf(address(this));\n            if (base_amounts[i] > 0) {\n                coin.safeTransfer(msg.sender, base_amounts[i]);\n            }\n        }\n    }\n\n    function calculateTokenAmount(\n        IRequiemStableSwap pool,\n        IRequiemStableSwap basePool,\n        uint256[] memory meta_amounts,\n        uint256[] memory base_amounts,\n        bool is_deposit\n    ) external view returns (uint256) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256 _base_tokens = basePool.calculateTokenAmount(base_amounts, is_deposit);\n        meta_amounts[baseTokenIndex] = meta_amounts[baseTokenIndex] + _base_tokens;\n        return pool.calculateTokenAmount(meta_amounts, is_deposit);\n    }\n\n    function calculateRemoveLiquidity(\n        IRequiemStableSwap pool,\n        IRequiemStableSwap basePool,\n        uint256 amount\n    ) external view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        meta_amounts = pool.calculateRemoveLiquidity(address(this), amount);\n        uint256 lpAmount = meta_amounts[baseTokenIndex];\n        meta_amounts[baseTokenIndex] = 0;\n        base_amounts = basePool.calculateRemoveLiquidity(address(this), lpAmount);\n    }\n\n    function swapFromBase(\n        IRequiemStableSwap pool,\n        IRequiemStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\n        base_amounts[tokenIndexFrom] = dx;\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\n        coin.safeTransferFrom(msg.sender, address(this), dx);\n        coin.safeIncreaseAllowance(address(basePool), dx);\n        uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\n        if (baseTokenIndex != tokenIndexTo) {\n            baseToken.safeIncreaseAllowance(address(pool), baseLpAmount);\n            pool.swap(baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, deadline);\n        }\n        IERC20 coinTo = pool.getToken(tokenIndexTo);\n        uint256 amountOut = coinTo.balanceOf(address(this));\n        coinTo.safeTransfer(msg.sender, amountOut);\n        return amountOut;\n    }\n\n    function calculateSwapFromBase(\n        IRequiemStableSwap pool,\n        IRequiemStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\n        base_amounts[tokenIndexFrom] = dx;\n        uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\n        if (baseTokenIndex == tokenIndexTo) {\n            return baseLpAmount;\n        }\n        return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\n    }\n\n    function swapToBase(\n        IRequiemStableSwap pool,\n        IRequiemStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        IERC20 coin = pool.getToken(tokenIndexFrom);\n        coin.safeTransferFrom(msg.sender, address(this), dx);\n        uint256 tokenLPAmount = dx;\n        if (baseTokenIndex != tokenIndexFrom) {\n            coin.safeIncreaseAllowance(address(pool), dx);\n            tokenLPAmount = pool.swap(tokenIndexFrom, baseTokenIndex, dx, 0, deadline);\n        }\n        baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\n        basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\n        IERC20 coinTo = basePool.getToken(tokenIndexTo);\n        uint256 amountOut = coinTo.balanceOf(address(this));\n        coinTo.safeTransfer(msg.sender, amountOut);\n        return amountOut;\n    }\n\n    function calculateSwapToBase(\n        IRequiemStableSwap pool,\n        IRequiemStableSwap basePool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256) {\n        IERC20 baseToken = basePool.getLpToken();\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\n        uint256 tokenLPAmount = dx;\n        if (baseTokenIndex != tokenIndexFrom) {\n            tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\n        }\n        return basePool.calculateRemoveLiquidityOneToken(address(this), tokenLPAmount, tokenIndexTo);\n    }\n}\n"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../libraries/ERC20.sol\";\n\n/**\n * @dev THIS CONTRACT IS FOR TESTING PURPOSES ONLY.\n */\ncontract MockERC20 is ERC20 {\n    uint8 internal decimals_;\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) ERC20(_name, _symbol) {\n        super._mint(msg.sender, 1e27);\n        decimals_ = _decimals;\n    }\n\n    function mint(address _receiver, uint256 _amount) external {\n        _mint(_receiver, _amount);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return decimals_;\n    }\n}\n"
    },
    "contracts/interfaces/IRewardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface IRewardToken is IERC20 {\n    function mint(address _recipient, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface IRewarder {\n\n    function onReward(uint256 pid, address user, address recipient, uint256 rewardAmount, uint256 newLpAmount) external;\n    function pendingTokens(uint256 pid, address user, uint256 rewardAmount) external view returns (IERC20[] memory, uint256[] memory);\n}\n"
    },
    "contracts/interfaces/IMiniChefV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\nimport \"./IERC20.sol\";\n\ninterface IMiniChefV2 {\n    function lpToken(uint256 _pid) external view returns (IERC20);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}