/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RequiemStableSwapRouterInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(address,address,uint256[],uint256[],uint256,uint256)": FunctionFragment;
    "calculateConvert(address,address,uint256)": FunctionFragment;
    "calculateRemoveLiquidity(address,address,uint256)": FunctionFragment;
    "calculateSwapFromBase(address,address,uint8,uint8,uint256)": FunctionFragment;
    "calculateSwapToBase(address,address,uint8,uint8,uint256)": FunctionFragment;
    "calculateTokenAmount(address,address,uint256[],uint256[],bool)": FunctionFragment;
    "convert(address,address,uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256[],uint256[],uint256)": FunctionFragment;
    "swapFromBase(address,address,uint8,uint8,uint256,uint256,uint256)": FunctionFragment;
    "swapToBase(address,address,uint8,uint8,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateConvert",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemoveLiquidity",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapFromBase",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapToBase",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenAmount",
    values: [string, string, BigNumberish[], BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFromBase",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToBase",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateConvert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapFromBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapToBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFromBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapToBase", data: BytesLike): Result;

  events: {};
}

export class RequiemStableSwapRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RequiemStableSwapRouterInterface;

  functions: {
    addLiquidity(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateConvert(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateRemoveLiquidity(
      pool: string,
      basePool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        meta_amounts: BigNumber[];
        base_amounts: BigNumber[];
      }
    >;

    calculateSwapFromBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSwapToBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTokenAmount(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convert(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      pool: string,
      basePool: string,
      _amount: BigNumberish,
      min_amounts_meta: BigNumberish[],
      min_amounts_base: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFromBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapToBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    pool: string,
    basePool: string,
    meta_amounts: BigNumberish[],
    base_amounts: BigNumberish[],
    minToMint: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateConvert(
    fromPool: string,
    toPool: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRemoveLiquidity(
    pool: string,
    basePool: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      meta_amounts: BigNumber[];
      base_amounts: BigNumber[];
    }
  >;

  calculateSwapFromBase(
    pool: string,
    basePool: string,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSwapToBase(
    pool: string,
    basePool: string,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTokenAmount(
    pool: string,
    basePool: string,
    meta_amounts: BigNumberish[],
    base_amounts: BigNumberish[],
    is_deposit: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convert(
    fromPool: string,
    toPool: string,
    amount: BigNumberish,
    minToMint: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    pool: string,
    basePool: string,
    _amount: BigNumberish,
    min_amounts_meta: BigNumberish[],
    min_amounts_base: BigNumberish[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFromBase(
    pool: string,
    basePool: string,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    minDy: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapToBase(
    pool: string,
    basePool: string,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    minDy: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateConvert(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRemoveLiquidity(
      pool: string,
      basePool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        meta_amounts: BigNumber[];
        base_amounts: BigNumber[];
      }
    >;

    calculateSwapFromBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapToBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenAmount(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      pool: string,
      basePool: string,
      _amount: BigNumberish,
      min_amounts_meta: BigNumberish[],
      min_amounts_base: BigNumberish[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        amounts: BigNumber[];
        base_amounts: BigNumber[];
      }
    >;

    swapFromBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapToBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateConvert(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRemoveLiquidity(
      pool: string,
      basePool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapFromBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapToBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenAmount(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      pool: string,
      basePool: string,
      _amount: BigNumberish,
      min_amounts_meta: BigNumberish[],
      min_amounts_base: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFromBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapToBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateConvert(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRemoveLiquidity(
      pool: string,
      basePool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwapFromBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwapToBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTokenAmount(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convert(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      pool: string,
      basePool: string,
      _amount: BigNumberish,
      min_amounts_meta: BigNumberish[],
      min_amounts_base: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFromBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapToBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
